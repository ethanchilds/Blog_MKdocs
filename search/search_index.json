{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Welcome to MkDocs! MkDocs is a simple and lightweight static site generator, great for project documentation or blogs. MkDocs is built off of your basic markdown file and while this adds to the simplicity, it does come with some draw backs as it is restricted to just the functionalities that an md has. For example, unlike a Quarto document, we will not be able to render graphics just by adding R code blocks, instead we will need to render it beforehand and then add it to the repository.</p> <p>If the limitations of a markdown file doesn't work for your project, MkDocs is likely not the best option.</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install MkDocs, run the following command:</p> <pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"#set-up-project","title":"Set Up Project","text":"<p>To begin your new project you can first run the following command:</p> <pre><code>mkdocs new [project name]\n</code></pre> <p>Then run the following command:</p> <pre><code>cd [project name]\n</code></pre> <p>Optionally, if you would like to build the blog out of the existing directory, instead run the following command:</p> <pre><code>mkdocs new .\n</code></pre>"},{"location":"#run-your-website","title":"Run Your Website","text":"<p>MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. To use this, first make sure that you are in your projects directory, then run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>You can then acess your website by opening http://127.0.0.1:8000/ in your browser.</p>"},{"location":"customization/","title":"Customization","text":"<p>Most of the customization that occurs within MkDocs is done in the mkdocs.yml. We will go over a few of the basic things that can be done in MkDocs and Material for MkDocs, then go over how the differences of customization between the two. Having strong knowledge about the functionality of markdown documents will help customize the pages themselves. For example, page table of contents are dictated by the header table of contents. If you would like to include code, you would use the standard markdown code blocks which render on the website as follows:</p> <pre><code>import plotly.express as px\n\nprint('Hello World')\n\nx = 3 + 5\n</code></pre> <p>If you would like to highlight your code as it would appear in a normal file, there is some more complex steps that I will not cover here, but it would appear as follows:</p> <pre><code>import plotly.express as px\n\nprint('Hello World')\n\nx = 3 + 5\n</code></pre>"},{"location":"customization/#site-name","title":"Site Name","text":"<p>Changing the site name is a rather easy task, in the mkdocs.yml you would use the following code:</p> <pre><code>site_name: [My Site Name]\n</code></pre>"},{"location":"customization/#navigation-bar","title":"Navigation Bar","text":"<p>As mentioned, MkDocs already automatically renders a \"table of contents\" or \"nav bar\" for a page based off of the header sizes, but what if you would like to include more pages? First go into the docs folder and add a new markdown file, lets call it \"about.md\". Now in the mkdocs.yml, to include a nav bar to both markdown pages use the following code:</p> <pre><code>nav:\n  - Home: index.md\n  - About: about.md\n</code></pre> <p>There is also the option to split a tab on the nav bar into further pages, lets say you would like to split the about tab into two pages \"Getting Started\" and \"How To\" for the markdown files \"start.md\" and \"how.md\". In the mkdocs.yml you would then use the following code:</p> <pre><code>nav:\n  - Home: index.md\n  - 'About':\n    - 'Getting Started': 'start.md'\n    - 'How To': 'how.md'\n</code></pre>"},{"location":"customization/#theme","title":"Theme","text":"<p>This is where we introduce the main seperation of base MkDocs and Material for MkDocs. MkDocs comes with very few base themes, some of those being the default and 'readthedocs'. Default theme requires no changes, but to use 'readthedocs', in mkdocs.yml use the following code:</p> <pre><code>theme: readthedocs\n</code></pre> <p>While base MkDocs is slick for a simple site, it doesn't offer the most features. This is where Material for MkDocs comes in. Material for MkDocs provides a new theme that allows for easy adjustment of features, colors, extensions, etc. In order to implement it, in the MkDocs.yml use the following code:</p> <pre><code>theme:\n  name: material\n</code></pre> <p>This allows access to the plethora of options in this package. </p> <p>It is important to note that all sites built on Material for MkDocs will have the same overall structure. Custom themes will require knowledge of HTML or CSS and will be built upon base MkDocs.</p>"},{"location":"customization/#next-steps","title":"Next Steps","text":"<p>I have so far covered very basic information on what can be done with MkDocs and Material for MkDocs. To learn more about how to use these website frameworks, please refer to the following sites:</p> <ul> <li>https://www.mkdocs.org/</li> <li>https://squidfunk.github.io/mkdocs-material/</li> </ul>"},{"location":"deploy/","title":"Deploying to GitHub Pages","text":""},{"location":"deploy/#github-actions","title":"GitHub Actions","text":"<p>Unfortunately, deploying MkDocs to GitHub pages is not as simple as having the full project in your repository. In order to handle the way GitHub actions deals with deployments we will be including a new file. </p> <p>First, within your projects directory, create a folder titled '.github'. Next, within the folder create another folder titled 'workflows'. Finally, within this folder create the file 'ci.yml'. Paste the following contents within the file:</p> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: actions/cache@v2\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: pip install mkdocs-material\n      - run: pip install pillow cairosvg\n      - run: mkdocs gh-deploy --force\n</code></pre> <p>With this file you can deploy your website hosted on GitHub pages and when you push your changes GitHub actions will know how to respond.</p>"},{"location":"deploy/#setting-up-github-pages","title":"Setting up GitHub Pages","text":"<p>First, go to your repository settings. On the side bar of this page you will notice a tab called 'pages', click on this. Under \"Build and deployment\" have \"Source\" set to \"Deploy from a branch\" and \"Branch\" set to \"gh-pages\". If the ci.yml has not been included in the project \"gh-pages\" will not be an option at this stage. Finally save your preferences and after a minute your pages tab should appear as follows:</p> <p></p> <p>The link at the top of your pages tab will be the link to your new GitHub pages website.</p>"}]}